service:
  name: serverless-ontology-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    ONTOLOGIES_TABLE: Ontologies-${self:provider.stage}

  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Scan
  #       - dynamodb:PutItem
  #       - dynamodb:GetItem
  #       - dynamodb:DeleteItem
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ONTOLOGIES_TABLE}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Ontology API
        description: Serverless application for ontology data manipulation
    models:
      - name: OntologyRequest
        contentType: application/json
        schema: ${file(models/create-ontology-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/userPoolAuthorizer.handler

  GetOntologies:
    handler: src/lambda/http/getOntologies.handler
    events:
      - http:
          method: get
          path: ontologies
          cors: true
          authorizer: Auth
    role: getOntologiesRole

  UpdateOntology:
    handler: src/lambda/http/updateOntology.handler
    events:
      - http:
          method: put
          path: ontology
          cors: true
          authorizer: Auth
    role: putOntologyRole

  CreateOntology:
    handler: src/lambda/http/createOntology.handler
    events:
      - http:
          method: post
          path: ontology
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new ontology
            description: Create a new ontology
            requestModels:
              'application/json': OntologyRequest
    role: putOntologyRole

  GetOntology:
    handler: src/lambda/http/getOntology.handler
    events:
      - http:
          method: get
          path: ontology/{id}
          cors: true
          authorizer: Auth
    role: getOntologyRole
  
  DeleteOntology:
    handler: src/lambda/http/deleteOntology.handler
    events:
      - http:
          method: delete
          path: ontology/{id}
          cors: true
          authorizer: Auth
    role: deleteOntologyRole
  
  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt OntologySearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt OntologiesDynamoDBTable.StreamArn
    role: syncESRole


  RecreateElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt OntologySearch.DomainEndpoint
    handler: src/lambda/elasticSearch/repopulate.handler
    events:
      - http:
          method: get
          path: recreate
          cors: true
          authorizer: Auth
    role: syncESRole
  
  searchElasticsearch:
    handler: src/lambda/elasticSearch/query.handler
    environment:
      ES_ENDPOINT: !GetAtt OntologySearch.DomainEndpoint
    events:
      - http:
          method: get
          path: search/{id}
          cors: true
          authorizer: Auth
    role: searchESRole

resources:
  Resources:
    OntologiesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.ONTOLOGIES_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    getOntologiesRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /ontology/
        RoleName: getOntologiesRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: getOntologiesPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ONTOLOGIES_TABLE}
    getOntologyRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /ontology/
        RoleName: getOntologyRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: getOntologyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ONTOLOGIES_TABLE}
    deleteOntologyRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /ontology/
        RoleName: deleteOntologyRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: deleteOntologyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ONTOLOGIES_TABLE}
    putOntologyRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /ontology/
        RoleName: putOntologyRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: putOntologyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ONTOLOGIES_TABLE}
    syncESRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /ontology/
        RoleName: syncESRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: syncESPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetShardIterator
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:ListStreams
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ONTOLOGIES_TABLE}/*
                - Effect: Allow
                  Action:
                    - es:ESHttpPost
                    - es:ESHttpPatch
                    - es:ESHttpDelete
                    - es:ESHttpPut
                  Resource: arn:aws:es:${self:provider.region}:*:domain/ontology-search-${self:provider.stage}
    searchESRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /ontology/
        RoleName: searchESRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: searchESPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - es:ESHttpGet
                  Resource: arn:aws:es:${self:provider.region}:*:domain/ontology-search-${self:provider.stage}/*

    OntologySearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: ontology-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        # AccessPolicies:
        #   Version: '2012-10-17'
        #   Statement:
        #     -
        #       Effect: Allow
        #       Principal:
        #         AWS: "*"
        #       Resource: "*"
        #       Action: 'es:ESHttp*'
